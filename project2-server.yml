Description: >
    This deploys the server resources of the project. A launch configuration
    that will diploy 4 servers in two private subnets using an Autoscaling
    group. A load-balancer and 2 NAT gateways.

Parameters:
    EnvironmentName:
        Description: The Environment name for resources
        Type: String
    
    ServersAMI:
        Description: AMI used for the EC2 instances
        Type: String
        
Resources:
    S3ReadOnlyRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    -   Effect: "Allow"
                        Principal:
                            Service:
                            -   "ec2.amazonaws.com"
                        Action:
                        -   "sts:AssumeRole"
            ManagedPolicyArns:
            -   arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
            Path: "/"
    
    WebAppProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Roles: 
            -   !Ref S3ReadOnlyRole

    WebServersSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow HTTP
            VpcId:
                Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            -   IpProtocol: -1
                FromPort: -1
                ToPort: -1
                CidrIp: 0.0.0.0/0
    
    LBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow HTTP
            VpcId:
                Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0

    WebServersLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install apache2 -y
                    systemctl start apache2.service
                    cd /var/www/html
                    echo "it works! Udagram, Udacity" > index.html
            ImageId: !Ref ServersAMI
            IamInstanceProfile: !Ref WebAppProfile
            SecurityGroups:
            -   !Ref WebServersSecurityGroup
            InstanceType: t2.medium
            BlockDeviceMappings:
            -   DeviceName: "/dev/sdk"
                Ebs:
                    VolumeSize: 10
    
    WebServersAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            LaunchConfigurationName: !Ref WebServersLaunchConfig
            MinSize: '4'
            MaxSize: '4'
            DesiredCapacity: '4'
            VPCZoneIdentifier:
            -   Fn::ImportValue: 
                    !Sub ${EnvironmentName}-PRIV-NETS
            TargetGroupARNs: 
            -   !Ref WebServersTargetGroup
            HealthCheckGracePeriod: 60
            HealthCheckType: ELB
    
    WebServersTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Protocol: HTTP
            Port: 80
            UnhealthyThresholdCount: 5
            VpcId:
                Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
    
    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
            -   Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN
            -   Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SN
            SecurityGroups:
            -   !Ref LBSecurityGroup
            Tags:
            -   Key: Name
                Value: !Sub ${EnvironmentName} LoadBalancer
    
    LBListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            -   Type: forward
                TargetGroupArn: !Ref WebServersTargetGroup
            LoadBalancerArn: !Ref LoadBalancer
            Port: 80
            Protocol: HTTP
    
    LBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            -   Type: forward
                TargetGroupArn: !Ref WebServersTargetGroup
            Conditions:
            -   Field: path-pattern
                Values: [/]
            ListenerArn: !Ref LBListener
            Priority: 1

Outputs:
    LBURL:
        Description: Public URL for the LoadBalancer
        Value:
            Fn::Join: ['', ["http://", !GetAtt LoadBalancer.DNSName]]
        Export:
            Name: !Sub ${EnvironmentName}-LBURL